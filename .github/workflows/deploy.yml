name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the main branch
  push:
    branches: ["main"]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Build site structure
        run: |
          # Create a _site directory for GitHub Pages
          mkdir -p _site
          
          # Copy all sites from the new sites/ directory structure
          if [ -d "sites" ]; then
            for site in sites/*/; do
              if [ -d "$site" ]; then
                site_name=$(basename "$site")
                echo "Copying sites/$site_name to _site/$site_name"
                cp -r "$site" "_site/$site_name"
                
                # Remove generated files that shouldn't be deployed
                rm -f "_site/$site_name/INSTRUCTIONS.md"
                rm -f "_site/$site_name/mcp-prompt.txt"
                rm -f "_site/$site_name/site-config.json"
                rm -f "_site/$site_name/dev-server.py"
                rm -f "_site/$site_name/VALIDATION_REPORT.md"
                rm -f "_site/$site_name/deploy-info.json"
                
                echo "âœ… Site $site_name prepared for deployment"
              fi
            done
          fi
          
          # Also copy legacy site_* directories if they exist (for backward compatibility)
          for site in site_*/; do
            if [ -d "$site" ]; then
              site_name="${site%/}"
              site_name="${site_name#site_}"
              echo "Copying legacy $site to _site/$site_name"
              cp -r "$site" "_site/$site_name"
            fi
          done
          
          # Create an index.html that lists all sites
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Figma-to-Production Sites</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      padding: 2rem;
                  }
                  .container {
                      max-width: 800px;
                      background: white;
                      border-radius: 20px;
                      padding: 3rem;
                      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                  }
                  h1 {
                      color: #333;
                      margin-bottom: 1rem;
                      font-size: 2.5rem;
                  }
                  .subtitle {
                      color: #666;
                      margin-bottom: 2rem;
                      font-size: 1.1rem;
                  }
                  .sites-list {
                      list-style: none;
                  }
                  .site-item {
                      margin-bottom: 1rem;
                  }
                  .site-link {
                      display: block;
                      padding: 1.5rem;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      text-decoration: none;
                      border-radius: 10px;
                      transition: transform 0.2s, box-shadow 0.2s;
                      font-weight: 600;
                  }
                  .site-link:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
                  }
                  .footer {
                      margin-top: 2rem;
                      padding-top: 2rem;
                      border-top: 2px solid #eee;
                      color: #999;
                      font-size: 0.9rem;
                      text-align: center;
                  }
                  .badge {
                      display: inline-block;
                      padding: 0.25rem 0.75rem;
                      background: #667eea;
                      color: white;
                      border-radius: 20px;
                      font-size: 0.85rem;
                      margin-left: 0.5rem;
                  }
                  .badge-legacy {
                      background: #6c757d;
                  }
                  .badge-ready {
                      background: #28a745;
                  }
                  .badge-generating {
                      background: #007bff;
                      animation: pulse 2s infinite;
                  }
                  @keyframes pulse {
                      0% { opacity: 1; }
                      50% { opacity: 0.7; }
                      100% { opacity: 1; }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>ðŸš€ MCP Figma Platform v2.0</h1>
                  <p class="subtitle">Professional landing pages generated from Figma designs using AI and automation</p>
                  
                  <ul class="sites-list" id="sites-list">
                      <!-- Sites will be inserted here -->
                  </ul>
                  
                  <div class="footer">
                      <p>Generated from Figma designs â€¢ Powered by <strong>MCP Figma v2.0</strong> â€¢ Total sites: <span id="site-count">${sites.length}</span></p>
                      <p style="margin-top: 0.5rem; font-size: 0.8rem;">
                          ðŸ”§ Current: GitHub Pages | ðŸŽ¯ Next: Azure Static Web Apps | 
                          <a href="https://github.com/tiagofer/MCP-figma" target="_blank" style="color: #667eea; text-decoration: none;">View on GitHub</a>
                      </p>
                  </div>
              </div>
              
              <script>
                  // Auto-discover sites
                  const sites = [
          EOF
          
          # Add each site to the list
          first=true
          
          # Add sites from the new sites/ directory structure
          if [ -d "sites" ]; then
            for site in sites/*/; do
              if [ -d "$site" ]; then
                site_name=$(basename "$site")
                if [ "$first" = true ]; then
                  first=false
                else
                  echo "," >> _site/index.html
                fi
                
                # Try to read site metadata if available
                site_title="$site_name"
                site_status="active"
                if [ -f "$site/site-config.json" ]; then
                  # Extract title from config if available (basic parsing)
                  if command -v jq >/dev/null 2>&1; then
                    site_title=$(jq -r '.name // "'$site_name'"' "$site/site-config.json" 2>/dev/null || echo "$site_name")
                    site_status=$(jq -r '.status // "active"' "$site/site-config.json" 2>/dev/null || echo "active")
                  fi
                fi
                
                echo "            { name: '$site_name', title: '$site_title', path: '$site_name/', status: '$site_status' }" >> _site/index.html
              fi
            done
          fi
          
          # Add legacy site_* directories for backward compatibility
          for site in site_*/; do
            if [ -d "$site" ]; then
              site_name="${site%/}"
              site_name="${site_name#site_}"
              if [ "$first" = true ]; then
                first=false
              else
                echo "," >> _site/index.html
              fi
              echo "            { name: '$site_name', title: '$site_name', path: '$site_name/', status: 'legacy' }" >> _site/index.html
            fi
          done
          
          cat >> _site/index.html << 'EOF'
                  ];
                  
                  const sitesList = document.getElementById('sites-list');
                  sites.forEach(site => {
                      const li = document.createElement('li');
                      li.className = 'site-item';
                      
                      // Use title if available, otherwise format the name
                      const displayName = site.title || site.name
                          .split('-')
                          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                          .join(' ');
                      
                      // Status-based styling and badges
                      let badgeText = 'View Site';
                      let badgeClass = 'badge';
                      
                      if (site.status === 'legacy') {
                          badgeText = 'Legacy';
                          badgeClass = 'badge badge-legacy';
                      } else if (site.status === 'validated') {
                          badgeText = 'âœ… Ready';
                          badgeClass = 'badge badge-ready';
                      } else if (site.status === 'generating') {
                          badgeText = 'ðŸ”„ Generating';
                          badgeClass = 'badge badge-generating';
                      }
                      
                      li.innerHTML = `
                          <a href="${site.path}" class="site-link">
                              ${displayName}
                              <span class="${badgeClass}">${badgeText}</span>
                          </a>
                      `;
                      sitesList.appendChild(li);
                  });
                  
                  // Update the site count in footer
                  const siteCountElement = document.getElementById('site-count');
                  if (siteCountElement) {
                      siteCountElement.textContent = sites.length;
                  }
              </script>
          </body>
          </html>
          EOF
          
          echo "Build complete! Sites ready for deployment."
          ls -la _site/
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
